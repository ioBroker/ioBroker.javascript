{"version":3,"file":"debug.js","sourceRoot":"","sources":["../../src/lib/debug.ts"],"names":[],"mappings":"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","sourcesContent":["import { fork, type ForkOptions } from 'node:child_process';\nimport type { DebugState } from '../types';\n\nconst adapter = {\n    log: {\n        error: (text: string) => console.error(text),\n        info: (text: string) => console.log(text),\n        warn: (text: string) => console.warn(text),\n        debug: (text: string) => console.log(text),\n    },\n    setState: (id: string, val: any): void => {\n        try {\n            val = JSON.parse(val);\n        } catch (e) {\n            console.error(e);\n        }\n        console.log(`FROM: ${JSON.stringify(val)}`);\n    },\n    extendForeignObjectAsync: (id: string, obj: Partial<ioBroker.ScriptObject>) => {\n        console.log(`EXTEND: ${id} ${JSON.stringify(obj)}`);\n        return Promise.resolve();\n    },\n};\nconst context: {\n    objects: Record<string, ioBroker.Object>;\n} = {\n    objects: {},\n};\n\nconst debugState: DebugState = {\n    scriptName: '',\n    child: null,\n    promiseOnEnd: null,\n    paused: false,\n    endTimeout: null,\n    running: false,\n    breakOnStart: false,\n    started: 0,\n};\n\nfunction stopDebug(): Promise<void> {\n    if (debugState.child) {\n        sendToInspector({ cmd: 'end' });\n        debugState.endTimeout = setTimeout(() => {\n            debugState.endTimeout = null;\n            debugState.child?.kill('SIGTERM');\n        });\n        debugState.promiseOnEnd = debugState.promiseOnEnd || Promise.resolve(0);\n    } else {\n        debugState.promiseOnEnd = Promise.resolve(0);\n    }\n\n    return debugState.promiseOnEnd.then(() => {\n        debugState.child = null;\n        debugState.running = false;\n        debugState.scriptName = '';\n        if (debugState.endTimeout) {\n            clearTimeout(debugState.endTimeout);\n            debugState.endTimeout = null;\n        }\n    });\n}\n\nfunction disableScript(id: string): Promise<void> {\n    const obj = context.objects[id];\n    if (obj?.common?.enabled) {\n        return adapter.extendForeignObjectAsync(obj._id, {\n            common: { enabled: false },\n        } as Partial<ioBroker.ScriptObject>);\n    }\n    return Promise.resolve();\n}\n\nfunction sendToInspector(message: string | Record<string, any>): void {\n    if (typeof message === 'string') {\n        try {\n            message = JSON.parse(message);\n        } catch {\n            adapter.log.error(`Cannot parse message to inspector: ${JSON.stringify(message)}`);\n            return adapter.setState('debug.from', JSON.stringify({ error: 'Cannot parse message to inspector' }));\n        }\n    }\n\n    if (debugState.child) {\n        debugState.child.send(JSON.stringify(message));\n    } else {\n        adapter.log.error(`Cannot send command to terminated inspector`);\n        return adapter.setState('debug.from', JSON.stringify({ error: `Cannot send command to terminated inspector` }));\n    }\n}\n/*\nfunction childPrint(text: string): void {\n    console.log(\n        text\n            .toString()\n            .split(/\\r\\n|\\r|\\n/g)\n            .filter(chunk => !!chunk)\n            .map(chunk => `< ${chunk}`)\n            .join('\\n'),\n    );\n}\n*/\n\nfunction debugScript(data: { breakOnStart?: boolean; scriptName: string }): Promise<void> {\n    // stop a script if it is running\n\n    return disableScript(data.scriptName)\n        .then(() => stopDebug())\n        .then(() => {\n            debugState.scriptName = data.scriptName;\n            debugState.breakOnStart = data.breakOnStart;\n\n            const options: ForkOptions = {\n                stdio: ['ignore', 'inherit', 'inherit', 'ipc'],\n            };\n\n            debugState.child = fork(`${__dirname}/../inspect.js`, [], options);\n\n            /*\n            debugState.child.stdout.setEncoding('utf8');\n            debugState.child.stderr.setEncoding('utf8');\n            debugState.child.stdout.on('data', childPrint);\n            debugState.child.stderr.on('data', childPrint);\n            */\n\n            debugState.child.on('message', (message: string): void => {\n                let debugMessage: {\n                    severity: string;\n                    text: string;\n                    cmd: string;\n                    scriptId: string;\n                    script: string;\n                };\n                try {\n                    debugMessage = JSON.parse(message);\n                } catch {\n                    return adapter.log.error(`Cannot parse message from inspector: ${message}`);\n                }\n\n                adapter.setState('debug.from', JSON.stringify(debugMessage));\n\n                switch (debugMessage.cmd) {\n                    case 'ready': {\n                        debugState.child?.send(JSON.stringify({ cmd: 'start', scriptName: debugState.scriptName }));\n                        break;\n                    }\n\n                    case 'watched': {\n                        console.log(`WATCHED: ${JSON.stringify(debugMessage)}`);\n                        break;\n                    }\n\n                    case 'paused': {\n                        debugState.paused = true;\n                        console.log(`PAUSED`);\n                        break;\n                    }\n\n                    case 'resumed': {\n                        debugState.paused = false;\n                        console.log(`STARTED`);\n                        break;\n                    }\n\n                    case 'log': {\n                        console.log(`[${debugMessage.severity}] ${debugMessage.text}`);\n                        break;\n                    }\n\n                    case 'readyToDebug': {\n                        console.log(\n                            `readyToDebug (set breakpoints): [${debugMessage.scriptId}] ${debugMessage.script}`,\n                        );\n                        break;\n                    }\n                }\n            });\n        });\n}\n\ndebugScript({ scriptName: 'script.js.Skript_1' })\n    .then(() => {\n        console.log('Debugging started');\n    })\n    .catch(e => {\n        console.error(e);\n    });\n"]}