{"version":3,"file":"words.js","sourceRoot":"","sources":["../../src/lib/words.ts"],"names":[],"mappings":"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","sourcesContent":["let systemLang: ioBroker.Languages = 'en';\nconst systemDictionary: Record<string, ioBroker.Translated> = {\n    'was not executed, while debug mode is active': {\n        en: 'was not executed, while debug mode is active',\n        de: 'wurde nicht ausgeführt, während der Debug-Modus aktiv ist',\n        ru: 'не был выполнен, пока активен режим отладки',\n        pt: 'não foi executado, enquanto o modo de depuração está ativo',\n        nl: 'is niet uitgevoerd, terwijl de foutopsporingsmodus actief is',\n        fr: \"n'a pas été exécuté alors que le mode débogage est actif\",\n        it: 'non è stato eseguito, mentre la modalità debug è attiva',\n        es: 'no se ejecutó, mientras el modo de depuración está activo',\n        pl: 'nie zostało wykonane, gdy aktywny jest tryb debugowania',\n        uk: 'не було виконано, поки активний режим налагодження',\n        'zh-cn': '调试模式处于活动状态时未执行',\n    },\n};\n\nexport function setLanguage(language: ioBroker.Languages): void {\n    systemLang = language;\n}\n\nexport function getLanguage(): ioBroker.Languages {\n    return systemLang;\n}\n\nfunction translateWord(\n    text: string,\n    lang?: ioBroker.Languages,\n    dictionary?: Record<string, ioBroker.Translated>,\n): string {\n    if (!text) {\n        return '';\n    }\n    lang = lang || systemLang;\n    dictionary = dictionary || systemDictionary;\n\n    if (dictionary[text]) {\n        let newText = dictionary[text][lang];\n        if (newText) {\n            return newText;\n        } else if (lang !== 'en') {\n            newText = dictionary[text].en;\n            if (newText) {\n                return newText;\n            }\n        }\n    } else if (typeof text === 'string' && !text.match(/_tooltip$/)) {\n        console.log(`\"${text}\": {\"en\": \"${text}\", \"de\": \"${text}\", \"ru\": \"${text}\"},`);\n    } else if (typeof text !== 'string') {\n        console.warn(`Trying to translate non-text: ${JSON.stringify(text)}`);\n    }\n    return text;\n}\n\nexport function _(text: string, arg1?: any, arg2?: any, arg3?: any): string {\n    text = translateWord(text);\n\n    let pos = text.indexOf('%s');\n    if (pos !== -1) {\n        text = text.replace('%s', arg1);\n    } else {\n        return text;\n    }\n\n    pos = text.indexOf('%s');\n    if (pos !== -1) {\n        text = text.replace('%s', arg2);\n    } else {\n        return text;\n    }\n\n    pos = text.indexOf('%s');\n    if (pos !== -1) {\n        text = text.replace('%s', arg3);\n    }\n\n    return text;\n}\n"]}