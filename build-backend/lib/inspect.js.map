{"version":3,"file":"inspect.js","sourceRoot":"","sources":["../../src/lib/inspect.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Node.js contributors. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\nimport { spawn, type ChildProcessWithoutNullStreams } from 'node:child_process';\nimport { EventEmitter } from 'node:events';\nimport { connect } from 'node:net';\nimport { debuglog as utilDebugLog, inspect, type InspectOptionsStylized } from 'node:util';\nimport { normalize, join } from 'node:path';\nimport { existsSync } from 'node:fs';\nimport type { WriteStream, ReadStream } from 'node:tty';\n\n// @ts-expect-error no types available\nimport InspectClient from 'node-inspect/lib/internal/inspect_client';\nimport type { Debugger, Runtime } from 'node:inspector';\nimport type { REPLServer } from 'repl';\nimport createRepl from './debugger';\n// const runAsStandalone = typeof __dirname !== 'undefined';\n\nconst breakOnStart = process.argv.includes('--breakOnStart');\n\nconst debuglog = utilDebugLog('inspect');\nlet inspector: NodeInspector;\nlet scriptToDebug = ''; // script.js.yy\nlet instanceToDebug = ''; // adapter.X\nlet alreadyPausedOnFirstLine = false;\n\nclass StartupError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = 'StartupError';\n    }\n}\n\nfunction portIsFree(host: string, port: number, timeout: number = 9999): Promise<void> {\n    if (port === 0) {\n        // Binding to a random port.\n        return Promise.resolve();\n    }\n\n    const retryDelay = 150;\n    let didTimeOut = false;\n\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            didTimeOut = true;\n            reject(new StartupError(`Timeout (${timeout}) waiting for ${host}:${port} to be free`));\n        }, timeout);\n\n        function pingPort(): void {\n            if (didTimeOut) {\n                return;\n            }\n\n            const socket = connect(port, host);\n            let didRetry = false;\n            function retry(): void {\n                if (!didRetry && !didTimeOut) {\n                    didRetry = true;\n                    setTimeout(pingPort, retryDelay);\n                }\n            }\n\n            socket.on('error', (error: Error) => {\n                if ((error as any).code === 'ECONNREFUSED') {\n                    resolve();\n                } else {\n                    retry();\n                }\n            });\n            socket.on('connect', () => {\n                socket.destroy();\n                retry();\n            });\n        }\n        pingPort();\n    });\n}\n\nfunction runScript(\n    script: string,\n    scriptArgs: string[] | undefined,\n    inspectHost: string,\n    inspectPort: number,\n    childPrint: (text: string, isError?: boolean) => void,\n): Promise<[ChildProcessWithoutNullStreams, number, string]> {\n    script = normalize(script);\n    return portIsFree(inspectHost, inspectPort).then(() => {\n        return new Promise(resolve => {\n            const args = [breakOnStart ? `--inspect-brk=${inspectPort}` : `--inspect=${inspectPort}`].concat(\n                [script],\n                scriptArgs || [],\n            );\n            const child = spawn(process.execPath, args);\n            child.stdout.setEncoding('utf8');\n            child.stderr.setEncoding('utf8');\n            child.stdout.on('data', childPrint);\n            child.stderr.on('data', text => childPrint(text, true));\n\n            let output = '';\n            function waitForListenHint(text: string): void {\n                output += text;\n                const res = /Debugger listening on ws:\\/\\/\\[?(.+?)]?:(\\d+)\\//.exec(output);\n                if (res) {\n                    const host = res[1];\n                    const port = Number.parseInt(res[2]);\n                    child.stderr.removeListener('data', waitForListenHint);\n                    resolve([child, port, host]);\n                }\n            }\n\n            child.stderr.on('data', waitForListenHint);\n        });\n    });\n}\n\nfunction createAgentProxy(domain: string, client: InspectClient): ProxyConstructor {\n    const agent: any = new EventEmitter();\n\n    agent.then = (...args: any[]) => {\n        // TODO: potentially fetch the protocol and pretty-print it here.\n        const descriptor = {\n            [inspect.custom](_depth: number, { stylize }: InspectOptionsStylized): string {\n                return stylize(`[Agent ${domain}]`, 'special');\n            },\n        };\n        return Promise.resolve(descriptor).then(...args);\n    };\n\n    return new Proxy(agent, {\n        get(target, name: string) {\n            if (name in target) {\n                return target[name];\n            }\n            return function callVirtualMethod(params: any) {\n                return client.callMethod(`${domain}.${name}`, params);\n            };\n        },\n    });\n}\n\ntype CommandToHostType =\n    | 'log'\n    | 'paused'\n    | 'resumed'\n    | 'setValue'\n    | 'scope'\n    | 'cb'\n    | 'sb'\n    | 'script'\n    | 'ready'\n    | 'readyToDebug'\n    | 'error'\n    | 'finished'\n    | 'expressions'\n    | 'stopOnException'\n    | 'getPossibleBreakpoints';\n\ntype DebuggerContext = {\n    url: string;\n    scriptId: Runtime.ScriptId;\n    reason: string;\n    executionContextId: number;\n    type: string;\n    id: number;\n    args: { value: any }[];\n};\n\ntype CommandToHost = {\n    cmd: CommandToHostType;\n    text?: string;\n    expr?: { name: string };\n    bp?: Debugger.Location;\n    context?: DebuggerContext | null | string;\n    error?: any;\n    errorContext?: any;\n    id?: Debugger.BreakpointId; // breakpoint ID\n    breakpoints?: Debugger.Location[];\n    scriptId?: Runtime.ScriptId;\n    scopes?: Debugger.Scope[];\n    variableName?: string;\n    scopeNumber?: number;\n    newValue?: string;\n    callFrameId?: string;\n    expressions?: { name: string; result: any }[];\n    script?: string;\n    url?: string;\n    severity?: 'warn' | 'error';\n    ts?: number;\n};\n\ninterface NodeInspectorOptions {\n    script?: string | null;\n    scriptArgs?: string[];\n    isRemote?: boolean;\n    host: string;\n    port: number;\n}\n\nexport class NodeInspector {\n    options: NodeInspectorOptions;\n    stdin: ReadStream;\n    stdout: WriteStream;\n    scripts: Record<string, Promise<{ script: string; scriptId: Runtime.ScriptId }> | null>;\n    delayedContext: DebuggerContext | null;\n    paused: boolean;\n    child: ChildProcessWithoutNullStreams | null;\n    _runScript: () => Promise<[ChildProcessWithoutNullStreams | null, number, string]>;\n\n    client: InspectClient;\n\n    Debugger: InspectClient;\n    HeapProfiler: InspectClient;\n    Profiler: InspectClient;\n    Runtime: InspectClient;\n\n    handleDebugEvent: (fullName: string, params: DebuggerContext) => void;\n    mainScriptId: Runtime.ScriptId | undefined;\n    mainFile: string | undefined;\n    repl: REPLServer | undefined;\n\n    constructor(options: NodeInspectorOptions, stdin: ReadStream, stdout: WriteStream) {\n        this.options = options;\n        this.stdin = stdin;\n        this.stdout = stdout;\n        this.scripts = {};\n        this.delayedContext = null;\n\n        this.paused = true;\n        this.child = null;\n\n        if (options.script) {\n            this._runScript = runScript.bind(\n                null,\n                options.script,\n                options.scriptArgs,\n                options.host,\n                options.port,\n                this.childPrint.bind(this),\n            );\n        } else {\n            this._runScript = () => Promise.resolve([null, options.port, options.host]);\n        }\n\n        this.client = new InspectClient();\n\n        this.Debugger = createAgentProxy('Debugger', this.client);\n        this.HeapProfiler = createAgentProxy('HeapProfiler', this.client);\n        this.Profiler = createAgentProxy('Profiler', this.client);\n        this.Runtime = createAgentProxy('Runtime', this.client);\n\n        this.handleDebugEvent = (\n            fullName: string,\n            params: {\n                url: string;\n                scriptId: Runtime.ScriptId;\n                reason: string;\n                executionContextId: number;\n                type: string;\n                id: number;\n                args: { value: any }[];\n            },\n        ): void => {\n            const [domain, name] = fullName.split('.');\n\n            if (domain === 'Debugger' && name === 'scriptParsed') {\n                // console.log(`Parsed: ${params.url}`);\n                if (\n                    (scriptToDebug && params.url.includes(scriptToDebug)) ||\n                    (instanceToDebug && params.url.includes(instanceToDebug))\n                ) {\n                    console.log(`My scriptID: ${params.scriptId}`);\n                    this.mainScriptId = params.scriptId;\n                    this.mainFile = params.url.replace('file:///', '');\n                    // load text of a script\n                    this.scripts[this.mainScriptId] = this.Debugger.getScriptSource({\n                        scriptId: this.mainScriptId,\n                    } as Debugger.GetScriptSourceParameterType).then((script: Debugger.GetScriptSourceReturnType) => ({\n                        script: script.scriptSource,\n                        scriptId: this.mainScriptId,\n                    }));\n\n                    // sometimes the pause event comes before scriptParsed\n                    if (this.delayedContext) {\n                        console.log('Send to debugger: readyToDebug');\n                        this.scripts[this.mainScriptId]?.then(data => {\n                            // console.log('Send to debugger: readyToDebug ' + JSON.stringify(data));\n                            sendToHost({\n                                cmd: 'readyToDebug',\n                                scriptId: this.mainScriptId,\n                                script: data.script,\n                                context: this.delayedContext,\n                                url: this.mainFile,\n                            });\n                            this.delayedContext = null;\n                        });\n                    }\n                }\n                return;\n            } else if (domain === 'Debugger' && name === 'resumed') {\n                this.Debugger.emit(name, params);\n                sendToHost({ cmd: 'resumed', context: params });\n                return;\n            } else if (domain === 'Debugger' && name === 'paused') {\n                console.log(`PAUSED!! ${alreadyPausedOnFirstLine}`);\n                if (!alreadyPausedOnFirstLine && params.reason === 'exception') {\n                    // ignore all exceptions by start\n                    this.Debugger.resume();\n                    return;\n                }\n                //console.warn(fullName + ': => \\n' + JSON.stringify(params, null, 2));\n                this.Debugger.emit(name, params);\n\n                if (!alreadyPausedOnFirstLine) {\n                    alreadyPausedOnFirstLine = true;\n                    // sometimes the pause event comes before scriptParsed\n                    if (this.mainScriptId && this.scripts[this.mainScriptId]) {\n                        this.scripts[this.mainScriptId]?.then(data =>\n                            sendToHost({\n                                cmd: 'readyToDebug',\n                                scriptId: data.scriptId,\n                                script: data.script,\n                                context: params,\n                                url: this.mainFile,\n                            }),\n                        );\n                    } else {\n                        // store context to send it later when script ID will be known\n                        this.delayedContext = params;\n                        console.log('PAUSED, but no scriptId');\n                    }\n                } else {\n                    // this.scripts[params.loca]\n                    //    .then(data =>\n                    sendToHost({ cmd: 'paused', context: params });\n                }\n                return;\n            }\n\n            if (domain === 'Runtime') {\n                //console.warn(fullName + ': => \\n' + JSON.stringify(params, null, 2));\n            }\n            if (domain === 'Runtime' && name === 'consoleAPICalled') {\n                const text = params.args[0].value;\n                if (instanceToDebug) {\n                    sendToHost({\n                        cmd: 'log',\n                        severity: params.type === 'warning' ? 'warn' : 'error',\n                        text,\n                        ts: Date.now(),\n                    });\n                } else if (text.includes(`$$${scriptToDebug}$$`)) {\n                    console.log(`${fullName} [${params.executionContextId}]: => ${text}`);\n                    const [severity, _text] = text.split(`$$${scriptToDebug}$$`);\n                    sendToHost({\n                        cmd: 'log',\n                        severity: severity as 'warn' | 'error',\n                        text: _text,\n                        ts: params.args[1] && params.args[1].value ? (params.args[1].value as number) : Date.now(),\n                    });\n                } else if (params.type === 'warning' || params.type === 'error') {\n                    sendToHost({\n                        cmd: 'log',\n                        severity: params.type === 'warning' ? 'warn' : 'error',\n                        text,\n                        ts: Date.now(),\n                    });\n                }\n                return;\n            } else if (domain === 'Runtime' && (params.id === 2 || params.executionContextId === 2)) {\n                if (name === 'executionContextCreated') {\n                    console.warn(`${fullName}: =>\\n${JSON.stringify(params, null, 2)}`);\n                } else if (name === 'executionContextDestroyed') {\n                    console.warn(`${fullName}: =>\\n${JSON.stringify(params, null, 2)}`);\n                    sendToHost({ cmd: 'finished', context: params });\n                }\n                return;\n            } else if (\n                domain === 'Runtime' &&\n                name === 'executionContextDestroyed' &&\n                params.executionContextId === 1\n            ) {\n                sendToHost({ cmd: 'finished', context: params });\n                console.log('Exited!');\n                setTimeout(() => process.exit(125), 200);\n            } else if (domain === 'Debugger' && name === 'scriptFailedToParse') {\n                // ignore\n                return;\n            }\n\n            console.warn(`${fullName}: =>\\n${JSON.stringify(params, null, 2)}`);\n\n            /*if (domain in this) {\n                this[domain].emit(name, params);\n            }*/\n        };\n        this.client.on('debugEvent', this.handleDebugEvent);\n        const startRepl: () => REPLServer = createRepl(this);\n\n        // Handle all possible exits\n        process.on('exit', () => this.killChild());\n        process.once('SIGTERM', process.exit.bind(process, 0));\n        process.once('SIGHUP', process.exit.bind(process, 0));\n\n        this.run()\n            .then(() => startRepl())\n            .then(repl => {\n                this.repl = repl;\n                this.repl.on('exit', () => process.exit(0));\n                this.paused = false;\n            })\n            .then(null, error =>\n                process.nextTick(() => {\n                    throw error;\n                }),\n            );\n    }\n\n    suspendReplWhile(fn: () => any): Promise<void> {\n        if (this.repl) {\n            this.repl.pause();\n        }\n        this.stdin.pause();\n        this.paused = true;\n\n        return new Promise(resolve => resolve(fn()))\n            .then(() => {\n                this.paused = false;\n                if (this.repl) {\n                    this.repl.resume();\n                    this.repl.displayPrompt();\n                }\n                this.stdin.resume();\n            })\n            .then(null, error =>\n                process.nextTick(() => {\n                    throw error;\n                }),\n            );\n    }\n\n    killChild(): void {\n        this.client.reset();\n        if (this.child) {\n            this.child.kill();\n            this.child = null;\n        }\n    }\n\n    run(): Promise<void> {\n        this.killChild();\n\n        return this._runScript().then(([child, port, host]) => {\n            this.child = child;\n\n            let connectionAttempts = 0;\n            const attemptConnect = (): void => {\n                ++connectionAttempts;\n                debuglog('connection attempt #%d', connectionAttempts);\n                this.stdout.write('.');\n                return this.client.connect(port, host).then(\n                    () => {\n                        debuglog('connection established');\n                        this.stdout.write(' ok');\n                    },\n                    (error: unknown): Promise<void> => {\n                        debuglog('connect failed', error);\n                        // If it's failed to connect 10 times, then print a failed message\n                        if (connectionAttempts >= 10) {\n                            this.stdout.write(' failed to connect, please retry\\n');\n                            process.exit(1);\n                        }\n\n                        return new Promise(resolve => setTimeout(resolve, 500)).then(attemptConnect);\n                    },\n                );\n            };\n\n            this.print(`connecting to ${host}:${port} ..`, true);\n            return attemptConnect();\n        });\n    }\n\n    clearLine(): void {\n        if (this.stdout.isTTY) {\n            this.stdout.cursorTo(0);\n            this.stdout.clearLine(1);\n        } else {\n            this.stdout.write('\\b');\n        }\n    }\n\n    print(text: string, oneLine: boolean = false): void {\n        this.clearLine();\n        this.stdout.write(oneLine ? text : `${text}\\n`);\n    }\n\n    childPrint(text: string, isError?: boolean): void {\n        isError &&\n            this.print(\n                text\n                    .toString()\n                    .split(/\\r\\n|\\r|\\n/g)\n                    .filter((chunk: string) => !!chunk)\n                    .map((chunk: string) => `< ${chunk}`)\n                    .join('\\n'),\n            );\n        if (!this.paused) {\n            this.repl?.displayPrompt(true);\n        }\n        if (/Waiting for the debugger to disconnect\\.\\.\\.\\n$/.test(text)) {\n            this.killChild();\n            sendToHost({ cmd: 'finished', text });\n        }\n    }\n}\n\nfunction parseArgv([target, ...args]: string[]): NodeInspectorOptions {\n    let host = '127.0.0.1';\n    let port = 9229;\n    let isRemote = false;\n    let script: string | null = target;\n    let scriptArgs = args;\n\n    const hostMatch = target.match(/^([^:]+):(\\d+)$/);\n    const portMatch = target.match(/^--port=(\\d+)$/);\n\n    if (hostMatch) {\n        // Connecting to remote debugger\n        // `node-inspect localhost:9229`\n        host = hostMatch[1];\n        port = parseInt(hostMatch[2], 10);\n        isRemote = true;\n        script = null;\n    } else if (portMatch) {\n        // start debugee on custom port\n        // `node inspect --port=9230 script.js`\n        port = parseInt(portMatch[1], 10);\n        script = args[0];\n        scriptArgs = args.slice(1);\n    } else if (args.length === 1 && /^\\d+$/.test(args[0]) && target === '-p') {\n        // Start debugger against a given pid\n        const pid = parseInt(args[0], 10);\n        try {\n            // Windows does not support UNIX signals. To enable debugging, you can use an undocumented API function\n            // https://github.com/node-inspector/node-inspector?tab=readme-ov-file#windows\n            // @ts-expect-error undocumented function\n            process._debugProcess(pid);\n        } catch (e: any) {\n            if (e.code === 'ESRCH') {\n                console.error(`Target process: ${pid} doesn't exist.`);\n                process.exit(1);\n            }\n            throw e;\n        }\n        script = null;\n        isRemote = true;\n    }\n\n    return {\n        host,\n        port,\n        isRemote,\n        script,\n        scriptArgs,\n    };\n}\n\nfunction startInspect(\n    argv: string[] = process.argv.slice(2),\n    stdin: ReadStream = process.stdin,\n    stdout: WriteStream = process.stdout,\n): void {\n    /*\n    if (argv.length < 1) {\n        const invokedAs = runAsStandalone ? 'node-inspect' : `${process.argv0} ${process.argv[1]}`;\n\n        console.error(`Usage: ${invokedAs} script.js`);\n        console.error(`       ${invokedAs} <host>:<port>`);\n        console.error(`       ${invokedAs} -p <pid>`);\n        process.exit(1);\n    }\n    */\n\n    const options = parseArgv(argv);\n    inspector = new NodeInspector(options, stdin, stdout);\n\n    stdin.resume();\n\n    function handleUnexpectedError(e: Error): void {\n        if (!(e instanceof StartupError)) {\n            console.error('There was an internal error in node-inspect. Please report this bug.');\n            console.error(e.message);\n            console.error(e.stack);\n        } else {\n            console.error(e.message);\n        }\n        inspector.child?.kill();\n        process.exit(1);\n    }\n\n    process.on('uncaughtException', handleUnexpectedError);\n}\n\nfunction extractErrorMessage(stack: string | undefined): string {\n    if (!stack) {\n        return '<unknown>';\n    }\n    const m = stack.match(/^\\w+: ([^\\n]+)/);\n    return m ? m[1] : stack;\n}\n\nfunction convertResultToError(result: Runtime.RemoteObject): Error {\n    const { className, description } = result;\n    const err = new Error(extractErrorMessage(description));\n    err.stack = description;\n    Object.defineProperty(err, 'name', { value: className });\n    return err;\n}\n\nprocess.on('message', (message: DebugCommand | string): void => {\n    if (typeof message === 'string') {\n        try {\n            message = JSON.parse(message) as DebugCommand;\n        } catch {\n            return console.error(`Cannot parse: ${JSON.stringify(message)}`);\n        }\n    }\n    processCommand(message);\n});\n\nsendToHost({ cmd: 'ready' });\n\n// possible commands\n// start           - {cmd: 'start', scriptName: 'script.js.myName'} - start the debugging\n// end             - {cmd: 'end'} - end the debugging and stop process\n// source          - {cmd: 'source', scriptId} - read text of script by id\n// watch           - {cmd: 'watch', expressions: ['i']} - add to watch the variable\n// unwatch         - {cmd: 'unwatch', expressions: ['i']} - add to watch the variable\n\n// sb              - {cmd: 'sb', breakpoints: [{scriptId: 50, lineNumber: 4, columnNumber: 0}]} - set breakpoint\n// cb              - {cmd: 'cb', breakpoints: [{scriptId: 50, lineNumber: 4, columnNumber: 0}]} - clear breakpoint\n\n// pause           - {cmd: 'pause'} - pause execution\n// cont            - {cmd: 'cont'} - resume execution\n// next            - {cmd: 'next'} - Continue to next line in current file\n// step            - {cmd: 'step'} - Step into, potentially entering a function\n// out             - {cmd: 'step'} - Step out, leaving the current function\n\ntype DebugCommandType =\n    | 'start'\n    | 'end'\n    | 'source'\n    | 'watch'\n    | 'unwatch'\n    | 'sb'\n    | 'cb'\n    | 'pause'\n    | 'cont'\n    | 'next'\n    | 'step'\n    | 'out'\n    | 'scope'\n    | 'setValue'\n    | 'expressions'\n    | 'stopOnException'\n    | 'getPossibleBreakpoints'\n    | 'error';\n\ntype DebugCommand = {\n    cmd: DebugCommandType;\n    scriptName?: string;\n    scriptId?: Runtime.ScriptId;\n    instance?: number;\n    adapterInstance?: string;\n    breakpoints?: Debugger.Location[] | Debugger.BreakpointId[];\n    expressions?: { name: string }[];\n    scopes?: Debugger.Scope[];\n\n    variableName?: string;\n    scopeNumber?: number;\n    newValue?: string;\n    callFrameId?: string;\n    state?: boolean;\n\n    start?: number;\n    end?: number;\n};\n\nfunction processCommand(data: DebugCommand): void {\n    if (data.cmd === 'start') {\n        scriptToDebug = data.scriptName as string;\n        // we can request the script by name or iobroker instance to debug\n        if (scriptToDebug) {\n            startInspect([\n                `${__dirname}/../main.js`,\n                (data.instance || 0).toString(),\n                '--debug',\n                '--debugScript',\n                scriptToDebug,\n            ]);\n        } else {\n            instanceToDebug = data.adapterInstance as string;\n            const [adapter, instance] = instanceToDebug.split('.');\n            let file: string | undefined;\n            try {\n                file = require.resolve(`iobroker.${adapter}`);\n            } catch (e: any) {\n                // try to locate in the same dir\n                const dir = normalize(join(__dirname, '..', `iobroker.${adapter}`));\n                if (existsSync(dir)) {\n                    const pack = require(join(dir, 'package.json'));\n                    if (existsSync(join(dir, pack.main || `${adapter}.js`))) {\n                        file = join(dir, pack.main || `${adapter}.js`);\n                    }\n                }\n\n                if (!file) {\n                    sendToHost({ cmd: 'error', error: `Cannot locate iobroker.${adapter}`, errorContext: e });\n                    setTimeout(() => {\n                        sendToHost({ cmd: 'finished', context: `Cannot locate iobroker.${adapter}` });\n                        setTimeout(() => process.exit(124), 500);\n                    }, 200);\n                    return;\n                }\n            }\n            file = file.replace(/\\\\/g, '/');\n            instanceToDebug = file;\n            console.log(`Start ${file} ${instance} --debug`);\n            startInspect([file, instance, '--debug']);\n        }\n    } else if (data.cmd === 'end') {\n        process.exit();\n    } else if (data.cmd === 'source') {\n        inspector.Debugger.getScriptSource({ scriptId: data.scriptId } as Debugger.GetScriptSourceParameterType).then(\n            (script: Debugger.GetScriptSourceReturnType) =>\n                sendToHost({ cmd: 'script', scriptId: data.scriptId, text: script.scriptSource }),\n        );\n    } else if (data.cmd === 'cont') {\n        inspector.Debugger.resume().catch((e: any) => sendToHost({ cmd: 'error', error: e }));\n    } else if (data.cmd === 'next') {\n        inspector.Debugger.stepOver().catch((e: any) => sendToHost({ cmd: 'error', error: e }));\n    } else if (data.cmd === 'pause') {\n        inspector.Debugger.pause().catch((e: any) => sendToHost({ cmd: 'error', error: e }));\n    } else if (data.cmd === 'step') {\n        inspector.Debugger.stepInto().catch((e: any) => sendToHost({ cmd: 'error', error: e }));\n    } else if (data.cmd === 'out') {\n        inspector.Debugger.stepOut().catch((e: any) => sendToHost({ cmd: 'error', error: e }));\n    } else if (data.cmd === 'sb') {\n        console.log(JSON.stringify(data));\n\n        Promise.all(\n            (data.breakpoints as Debugger.Location[])?.map((bp: Debugger.Location) =>\n                inspector.Debugger.setBreakpoint({\n                    location: {\n                        scriptId: bp.scriptId,\n                        lineNumber: bp.lineNumber,\n                        columnNumber: bp.columnNumber,\n                    },\n                } as Debugger.SetBreakpointParameterType)\n                    .then((result: Debugger.SetBreakpointReturnType) => ({\n                        id: result.breakpointId,\n                        location: result.actualLocation,\n                    }))\n                    .catch((e: any) =>\n                        sendToHost({ cmd: 'error', error: `Cannot set breakpoint: ${e}`, errorContext: e, bp }),\n                    ),\n            ) || [],\n        ).then(breakpoints => sendToHost({ cmd: 'sb', breakpoints }));\n    } else if (data.cmd === 'cb') {\n        Promise.all(\n            (data.breakpoints as Debugger.BreakpointId[])?.map(breakpointId =>\n                inspector.Debugger.removeBreakpoint({ breakpointId } as Debugger.RemoveBreakpointParameterType)\n                    .then(() => breakpointId)\n                    .catch((e: any) =>\n                        sendToHost({\n                            cmd: 'error',\n                            error: `Cannot clear breakpoint: ${e}`,\n                            errorContext: e,\n                            id: breakpointId,\n                        }),\n                    ),\n            ) || [],\n        ).then(breakpoints => sendToHost({ cmd: 'cb', breakpoints }));\n    } else if (data.cmd === 'watch') {\n        Promise.all(\n            data.expressions?.map(expr =>\n                inspector.Debugger.watch(expr).catch((e: any) =>\n                    sendToHost({ cmd: 'error', error: `Cannot watch expr: ${e}`, errorContext: e, expr }),\n                ),\n            ) || [],\n        ).then(() => console.log('Watch done'));\n    } else if (data.cmd === 'unwatch') {\n        Promise.all(\n            data.expressions?.map(expr =>\n                inspector.Debugger.unwatch(expr).catch((e: any) =>\n                    sendToHost({ cmd: 'error', error: `Cannot unwatch expr: ${e}`, errorContext: e, expr }),\n                ),\n            ) || [],\n        ).then(() => console.log('Watch done'));\n    } else if (data.cmd === 'scope') {\n        Promise.all(\n            data.scopes\n                ?.filter(scope => scope?.object && scope.object.objectId)\n                .map(scope =>\n                    inspector.Runtime.getProperties({\n                        objectId: scope.object.objectId,\n                        generatePreview: true,\n                    } as Runtime.GetPropertiesParameterType)\n                        .then((result: any) => ({ type: scope.type, properties: result }))\n                        .catch((e: any) =>\n                            sendToHost({ cmd: 'error', error: `Cannot get scopes expr: ${e}`, errorContext: e }),\n                        ),\n                ) || [],\n        ).then(scopes => sendToHost({ cmd: 'scope', scopes }));\n    } else if (data.cmd === 'setValue') {\n        inspector.Debugger.setVariableValue({\n            variableName: data.variableName,\n            scopeNumber: data.scopeNumber,\n            newValue: data.newValue,\n            callFrameId: data.callFrameId,\n        } as Debugger.SetVariableValueParameterType)\n            .catch((e: any) => sendToHost({ cmd: 'setValue', variableName: `Cannot setValue: ${e}`, errorContext: e }))\n            .then(() =>\n                sendToHost({\n                    cmd: 'setValue',\n                    variableName: data.variableName,\n                    scopeNumber: data.scopeNumber,\n                    newValue: data.newValue,\n                    callFrameId: data.callFrameId,\n                }),\n            );\n    } else if (data.cmd === 'expressions') {\n        Promise.all(\n            data.expressions?.map(item =>\n                inspector.Debugger.evaluateOnCallFrame({\n                    callFrameId: data.callFrameId,\n                    expression: item.name,\n                    objectGroup: 'node-inspect',\n                    returnByValue: true,\n                    generatePreview: true,\n                } as Debugger.EvaluateOnCallFrameParameterType)\n                    // @ts-expect-error fix later\n                    .then(({ result, wasThrown }: Debugger.EvaluateOnCallFrameReturnType) => {\n                        if (wasThrown) {\n                            return { name: item.name, result: convertResultToError(result) };\n                        }\n                        return { name: item.name, result };\n                    })\n                    .catch((e: any) =>\n                        sendToHost({ cmd: 'expressions', variableName: `Cannot setValue: ${e}`, errorContext: e }),\n                    ),\n            ) || [],\n        ).then(expressions => sendToHost({ cmd: 'expressions', expressions }));\n    } else if (data.cmd === 'stopOnException') {\n        inspector.Debugger.setPauseOnExceptions({\n            state: data.state ? 'all' : 'none',\n        } as Debugger.SetPauseOnExceptionsParameterType).catch((e: any) =>\n            sendToHost({ cmd: 'stopOnException', variableName: `Cannot stopOnException: ${e}`, errorContext: e }),\n        );\n    } else if (data.cmd === 'getPossibleBreakpoints') {\n        inspector.Debugger.getPossibleBreakpoints({ start: data.start, end: data.end })\n            .then((breakpoints: Debugger.GetPossibleBreakpointsReturnType) =>\n                sendToHost({ cmd: 'getPossibleBreakpoints', breakpoints: breakpoints.locations }),\n            )\n            .catch((e: any) =>\n                sendToHost({\n                    cmd: 'getPossibleBreakpoints',\n                    variableName: `Cannot getPossibleBreakpoints: ${e}`,\n                    errorContext: e,\n                }),\n            );\n    } else {\n        console.error(`Unknown command: ${JSON.stringify(data)}`);\n    }\n}\n\nfunction sendToHost(data: CommandToHost): void {\n    if (data.cmd === 'error') {\n        console.error(data.text);\n        if (data.expr) {\n            console.error(`[EXPRESSION] ${JSON.stringify(data.expr)}`);\n        }\n        if (data.bp) {\n            console.error(`[BP] ${JSON.stringify(data.bp)}`);\n        }\n    }\n\n    process.send && process.send(JSON.stringify(data));\n}\n"]}