{"version":3,"file":"protectFs.js","sourceRoot":"","sources":["../../src/lib/protectFs.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n    BufferEncodingOption,\n    CopyOptions,\n    Dirent,\n    MakeDirectoryOptions,\n    Mode,\n    ObjectEncodingOptions,\n    OpenMode,\n    PathLike,\n    RmDirOptions,\n    RmOptions,\n    StatOptions,\n    Stats,\n    TimeLike,\n    CopySyncOptions,\n    NoParamCallback,\n    PathOrFileDescriptor,\n    WriteFileOptions,\n    EncodingOption,\n    FSWatcher,\n    ReadStream,\n    StatsListener,\n    StatWatcher,\n    WatchListener,\n    WriteStream,\n} from 'node:fs';\nimport type { Abortable } from 'node:events';\nimport type { FileHandle, FlagAndOpenMode } from 'node:fs/promises';\nimport type { URL } from 'node:url';\nimport type { Stream } from 'node:stream';\n\nimport * as nodeFS from 'node:fs';\nimport { sep, normalize, join } from 'node:path';\n\nexport default class ProtectFs {\n    private readonly log: ioBroker.Logger;\n    private readonly ioBrokerDataDir: string;\n    public readonly promises: {\n        access: (path: PathLike, mode?: number) => Promise<void>;\n        cp: (source: string | URL, destination: string | URL, opts?: CopyOptions) => Promise<void>;\n        readFile: (\n            path: PathLike | FileHandle,\n            options:\n                | ({\n                      encoding: BufferEncoding;\n                      flag?: OpenMode | undefined;\n                  } & Abortable)\n                | BufferEncoding,\n        ) => Promise<string>;\n        readlink: (path: PathLike, options: BufferEncodingOption) => Promise<Buffer>;\n        symlink: (target: PathLike, path: PathLike, type?: string | null) => Promise<void>;\n        writeFile: (\n            file: PathLike | FileHandle,\n            data:\n                | string\n                | NodeJS.ArrayBufferView\n                | Iterable<string | NodeJS.ArrayBufferView>\n                | AsyncIterable<string | NodeJS.ArrayBufferView>\n                | Stream,\n            options?:\n                | (ObjectEncodingOptions & {\n                      mode?: Mode | undefined;\n                      flag?: OpenMode | undefined;\n                      flush?: boolean | undefined;\n                  } & Abortable)\n                | BufferEncoding\n                | null,\n        ) => Promise<void>;\n        unlink: (path: PathLike) => Promise<void>;\n        appendFile: (\n            path: PathLike | FileHandle,\n            data: string | Uint8Array,\n            options?:\n                | (ObjectEncodingOptions & FlagAndOpenMode & { flush?: boolean | undefined })\n                | BufferEncoding\n                | null,\n        ) => Promise<void>;\n        chmod: (path: PathLike, mode: Mode) => Promise<void>;\n        copyFile: (src: PathLike, dest: PathLike, mode?: number) => Promise<void>;\n        rename: (oldPath: PathLike, newPath: PathLike) => Promise<void>;\n        open: (path: PathLike, flags?: string | number, mode?: Mode) => Promise<FileHandle>;\n        truncate: (path: PathLike, len?: number) => Promise<void>;\n        stat: (path: PathLike, opts?: StatOptions) => Promise<Stats>;\n        utimes: (path: PathLike, atime: TimeLike, mtime: TimeLike) => Promise<void>;\n        readdir: (\n            path: PathLike,\n            options?: ObjectEncodingOptions & {\n                withFileTypes: true;\n                recursive?: boolean | undefined;\n            },\n        ) => Promise<Dirent[]>;\n        lchmod: (path: PathLike, mode: Mode) => Promise<void>;\n        lchown: (path: PathLike, uid: number, gid: number) => Promise<void>;\n        link: (existingPath: PathLike, newPath: PathLike) => Promise<void>;\n        lstat: (path: PathLike, opts?: StatOptions) => Promise<Stats>;\n        lutimes: (path: PathLike, atime: TimeLike, mtime: TimeLike) => Promise<void>;\n        mkdir: (path: PathLike, options?: Mode | MakeDirectoryOptions | null) => Promise<string | undefined>;\n        mkdtemp: (prefix: string, options?: ObjectEncodingOptions | BufferEncoding | null) => Promise<string>;\n        rm: (path: PathLike, options?: RmOptions) => Promise<void>;\n        rmdir: (path: PathLike, options?: RmDirOptions) => Promise<void>;\n    };\n    public readonly constants: Record<string, number>;\n\n    constructor(log: ioBroker.Logger, ioBrokerDataDir: string) {\n        this.ioBrokerDataDir = ioBrokerDataDir;\n        this.log = log || {\n            silly: (message: string): void => console.log(message),\n            debug: (message: string): void => console.debug(message),\n            info: (message: string): void => console.info(message),\n            warn: (message: string): void => console.warn(message),\n            error: (message: string): void => console.error(message),\n            level: 'info',\n        };\n\n        this.promises = {\n            access: async (path: PathLike, mode?: number): Promise<void> => {\n                this.#checkProtected(path, true);\n                return nodeFS.promises.access(path, mode);\n            },\n            cp: async (source: string | URL, destination: string | URL, opts?: CopyOptions): Promise<void> => {\n                this.#checkProtected(source, false);\n                this.#checkProtected(destination, false);\n                return nodeFS.promises.cp(source, destination, opts);\n            },\n            readFile: async (\n                path: PathLike | FileHandle,\n                options:\n                    | ({\n                          encoding: BufferEncoding;\n                          flag?: OpenMode | undefined;\n                      } & Abortable)\n                    | BufferEncoding,\n            ): Promise<string> => {\n                this.#checkProtected(path, true);\n                return nodeFS.promises.readFile(path, options); // async function readFile(path, options) {\n            },\n            readlink: async (path: PathLike, options: BufferEncodingOption): Promise<Buffer> => {\n                this.#checkProtected(path, true);\n                return nodeFS.promises.readlink(path, options); // async function readlink(path, options) {\n            },\n            symlink: async (target: PathLike, path: PathLike, type?: string | null): Promise<void> => {\n                this.#checkProtected(target, true);\n                this.#checkProtected(path, false);\n                return nodeFS.promises.symlink(target, path, type); // async function symlink(target, path, type_) {\n            },\n            writeFile: async (\n                file: PathLike | FileHandle,\n                data:\n                    | string\n                    | NodeJS.ArrayBufferView\n                    | Iterable<string | NodeJS.ArrayBufferView>\n                    | AsyncIterable<string | NodeJS.ArrayBufferView>\n                    | Stream,\n                options?:\n                    | (ObjectEncodingOptions & {\n                          mode?: Mode | undefined;\n                          flag?: OpenMode | undefined;\n                          /**\n                           * If all data is successfully written to the file, and `flush`\n                           * is `true`, `filehandle.sync()` is used to flush the data.\n                           *\n                           * @default false\n                           */\n                          flush?: boolean | undefined;\n                      } & Abortable)\n                    | BufferEncoding\n                    | null,\n            ): Promise<void> => {\n                this.#checkProtected(file, true);\n                return nodeFS.promises.writeFile.call(this, file, data, options); // async function writeFile(path, data, options) {\n            },\n            unlink: async (path: PathLike): Promise<void> => {\n                this.#checkProtected(path, false);\n                return nodeFS.promises.unlink.call(this, path); // async function unlink(path) {\n            },\n            appendFile: async (\n                path: PathLike | FileHandle,\n                data: string | Uint8Array,\n                options?:\n                    | (ObjectEncodingOptions & FlagAndOpenMode & { flush?: boolean | undefined })\n                    | BufferEncoding\n                    | null,\n            ): Promise<void> => {\n                this.#checkProtected(path, false);\n                return nodeFS.promises.appendFile.call(this, path, data, options); // async function appendFile(path, data, options) {\n            },\n            chmod: async (path: PathLike, mode: Mode): Promise<void> => {\n                this.#checkProtected(path, false);\n                return nodeFS.promises.chmod.call(this, path, mode); // async function chmod(path, mode) {\n            },\n            copyFile: async (src: PathLike, dest: PathLike, mode?: number): Promise<void> => {\n                this.#checkProtected(src, false);\n                this.#checkProtected(dest, false);\n                return nodeFS.promises.copyFile.call(this, src, dest, mode); // async function copyFile(src, dest, mode) {\n            },\n            rename: async (oldPath: PathLike, newPath: PathLike): Promise<void> => {\n                this.#checkProtected(oldPath, false);\n                this.#checkProtected(newPath, false);\n                return nodeFS.promises.rename.call(this, oldPath, newPath); // async function rename(oldPath, newPath) {\n            },\n            open: async (path: PathLike, flags?: string | number, mode?: Mode): Promise<FileHandle> => {\n                this.#checkProtected(path, true);\n                return nodeFS.promises.open.call(this, path, flags, mode); // async function open(path, flags, mode) {\n            },\n            truncate: async (path: PathLike, len?: number): Promise<void> => {\n                this.#checkProtected(path, false);\n                return nodeFS.promises.truncate.call(this, path, len); // async function truncate(path, len = 0) {\n            },\n            stat: async (path: PathLike, opts?: StatOptions): Promise<Stats> => {\n                this.#checkProtected(path, true);\n                const result = await nodeFS.promises.stat.call(this, path, opts); // async function stat(path, options = { bigint: false }) {\n                return result as Stats;\n            },\n            utimes: async (path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void> => {\n                this.#checkProtected(path, false);\n                return nodeFS.promises.utimes.call(this, path, atime, mtime); // async function utimes(path, atime, mtime) {\n            },\n            readdir: async (\n                path: PathLike,\n                options?: ObjectEncodingOptions & {\n                    withFileTypes: true;\n                    recursive?: boolean | undefined;\n                },\n            ): Promise<Dirent[]> => {\n                this.#checkProtected(path, true);\n                return nodeFS.promises.readdir.call(this, path, options || { encoding: null, withFileTypes: true }); // async function readdir(path, options) {\n            },\n            lchmod: async (path: PathLike, mode: Mode): Promise<void> => {\n                this.#checkProtected(path, false);\n                return nodeFS.promises.lchmod.call(this, path, mode); // async function lchmod(path, mode) {\n            },\n            lchown: async (path: PathLike, uid: number, gid: number): Promise<void> => {\n                this.#checkProtected(path, false);\n                return nodeFS.promises.lchown.call(this, path, uid, gid); // async function lchown(path, uid, gid) {\n            },\n            link: async (existingPath: PathLike, newPath: PathLike): Promise<void> => {\n                this.#checkProtected(existingPath, false);\n                this.#checkProtected(newPath, false);\n                return nodeFS.promises.link.call(this, existingPath, newPath); // async function link(existingPath, newPath) {\n            },\n            lstat: async (path: PathLike, opts?: StatOptions): Promise<Stats> => {\n                this.#checkProtected(path, true);\n                const res = await nodeFS.promises.lstat.call(this, path, opts); // async function lstat(path, options = { bigint: false }) {\n                return res as Stats;\n            },\n            lutimes: async (path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void> => {\n                this.#checkProtected(path, false);\n                return nodeFS.promises.lutimes.call(this, path, atime, mtime); // async function lutimes(path, atime, mtime) {\n            },\n            mkdir: async (\n                path: PathLike,\n                options?: Mode | MakeDirectoryOptions | null,\n            ): Promise<string | undefined> => {\n                this.#checkProtected(path, false);\n                return nodeFS.promises.mkdir.call(this, path, options); // async function mkdir(path, options) {\n            },\n            mkdtemp: async (\n                prefix: string,\n                options?: ObjectEncodingOptions | BufferEncoding | null,\n            ): Promise<string> => {\n                this.#checkProtected(prefix, false);\n                const tmp = await nodeFS.promises.mkdtemp.call(this, prefix, options); // async function mkdtemp(prefix, options) {\n                return tmp.toString();\n            },\n            rm: async (path: PathLike, options?: RmOptions): Promise<void> => {\n                this.#checkProtected(path, false);\n                return nodeFS.promises.rm.call(this, path, options); // async function rm(path, options) {\n            },\n            rmdir: async (path: PathLike, options?: RmDirOptions): Promise<void> => {\n                this.#checkProtected(path, false);\n                return nodeFS.promises.rmdir.call(this, path, options); // async function rmdir(path, options) {\n            },\n        };\n\n        // Add missing constants\n        this.constants = nodeFS.constants;\n\n        // Add missing functions\n        for (const m in nodeFS) {\n            if (\n                typeof (nodeFS as unknown as Record<string, any>)[m] === 'function' &&\n                Object.hasOwn(nodeFS, m) &&\n                !Object.hasOwn(this, m)\n            ) {\n                // console.debug(`Missing function in ProtectFS: ${m} - adding from node:fs`);\n                // @ts-expect-error Elsewise we must implement EVERY function in fs\n                this[m] = nodeFS[m];\n            }\n        }\n\n        for (const m in nodeFS.promises) {\n            if (\n                typeof (nodeFS.promises as unknown as Record<string, any>)[m] === 'function' &&\n                Object.hasOwn(nodeFS.promises, m) &&\n                !Object.hasOwn(this.promises, m)\n            ) {\n                // console.debug(`Missing function in ProtectFS: ${m} - adding from node:fs/promises`);\n                // @ts-expect-error Elsewise we must implement EVERY function in fs\n                this.promises[m] = nodeFS.promises[m];\n            }\n        }\n    }\n\n    #checkProtected(file: PathLike | FileHandle, readOnly: boolean): void {\n        if ((file as FileHandle).fd) {\n            return;\n        }\n        const filePath = normalize((file as PathLike).toString());\n\n        // todo: protect against file://...\n        if (filePath.endsWith(`-data${sep}objects.json`) || filePath.endsWith(`-data${sep}objects.jsonl`)) {\n            this.log.error(`May not read ${(file as PathLike).toString()}`);\n            throw new Error('Permission denied');\n        }\n        if (!readOnly && filePath.startsWith(join(this.ioBrokerDataDir, 'files'))) {\n            this.log.error(\n                `May not read ${(file as PathLike).toString()} - use ${readOnly ? 'readFile' : 'writeFile'} instead`,\n            );\n            throw new Error('Permission denied');\n        }\n    }\n\n    access(path: PathLike, callback: NoParamCallback): void {\n        this.#checkProtected(path, true);\n        return nodeFS.access(path, callback);\n    }\n\n    accessSync(path: PathLike, mode?: number): void {\n        this.#checkProtected(path, true);\n        return nodeFS.accessSync(path, mode); // function accessSync(path, mode) {\n    }\n\n    cp(\n        source: string | URL,\n        destination: string | URL,\n        opts: CopyOptions | ((err: NodeJS.ErrnoException | null) => void),\n        callback?: (err: NodeJS.ErrnoException | null) => void,\n    ): void {\n        this.#checkProtected(source, false);\n        this.#checkProtected(destination, false);\n        if (callback) {\n            return nodeFS.cp(source, destination, opts as CopyOptions, callback);\n        }\n        if (typeof opts === 'function') {\n            return nodeFS.cp(source, destination, opts);\n        }\n        return nodeFS.cp(source, destination, opts as (err: NodeJS.ErrnoException | null) => void);\n    }\n\n    cpSync(source: string | URL, destination: string | URL, opts?: CopySyncOptions): void {\n        this.#checkProtected(source, false);\n        this.#checkProtected(destination, false);\n        return nodeFS.cpSync.call(this, source, destination, opts); // function cpSync(src, dest, options) {\n    }\n\n    readFile(path: PathOrFileDescriptor, callback: (err: NodeJS.ErrnoException | null, data: Buffer) => void): void {\n        if (typeof path !== 'number') {\n            this.#checkProtected(path, true);\n        }\n        return nodeFS.readFile.call(this, path, callback); // function readFile(path, options, callback) {\n    }\n\n    readFileSync(\n        path: PathOrFileDescriptor,\n        options:\n            | {\n                  encoding: BufferEncoding;\n                  flag?: string | undefined;\n              }\n            | BufferEncoding,\n    ): string | Buffer {\n        if (typeof path !== 'number') {\n            this.#checkProtected(path, true);\n        }\n        return nodeFS.readFileSync.call(this, path, options); // function readFileSync(path, options) {\n    }\n\n    readlink(path: PathLike, callback: (err: NodeJS.ErrnoException | null, linkString: string) => void): void {\n        this.#checkProtected(path, true);\n        return nodeFS.readlink.call(this, path, callback); // function readlink(path, options, callback) {\n    }\n\n    readlinkSync(path: PathLike, options?: any): string | Buffer {\n        this.#checkProtected(path, true);\n        return nodeFS.readlinkSync.call(this, path, options); // function readlinkSync(path, options) {\n    }\n\n    symlink(\n        target: PathLike,\n        path: PathLike,\n        type: 'dir' | 'file' | 'junction' | undefined | null | NoParamCallback,\n        callback: NoParamCallback,\n    ): void {\n        this.#checkProtected(target, true);\n        this.#checkProtected(path, false);\n        if (typeof callback === 'function') {\n            // @ts-expect-error should work\n            return nodeFS.symlink.call(this, target, path, type, callback);\n        }\n        return nodeFS.symlink.call(this, target, path, type as NoParamCallback); // function symlink(target, path, type_, callback_) {\n    }\n\n    symlinkSync(target: PathLike, path: PathLike, type?: 'dir' | 'file' | 'junction' | null): void {\n        this.#checkProtected(target, true);\n        this.#checkProtected(path, false);\n        return nodeFS.symlinkSync.call(this, target, path, type); // function symlinkSync(target, path, type) {\n    }\n\n    writeFile(\n        file: PathLike | number,\n        data: string | NodeJS.ArrayBufferView,\n        options: WriteFileOptions | NoParamCallback,\n        callback?: NoParamCallback,\n    ): void {\n        if (typeof file !== 'number') {\n            this.#checkProtected(file, false);\n        }\n        // @ts-expect-error should work\n        return nodeFS.writeFile.call(this, file, data, options, callback); // function writeFile(path, data, options, callback) {\n    }\n\n    writeFileSync(file: PathLike | number, data: string | NodeJS.ArrayBufferView, options?: WriteFileOptions): void {\n        if (typeof file !== 'number') {\n            this.#checkProtected(file, false);\n        }\n        return nodeFS.writeFileSync.call(this, file, data, options); // function writeFileSync(path, data, options) {\n    }\n\n    unlink(path: PathLike, callback: NoParamCallback): void {\n        this.#checkProtected(path, false);\n        return nodeFS.unlink.call(this, path, callback); // function unlink(path, callback) {\n    }\n\n    unlinkSync(path: PathLike): void {\n        this.#checkProtected(path, false);\n        return nodeFS.unlinkSync.call(this, path); // function unlinkSync(path) {\n    }\n\n    appendFile(file: PathLike | number, data: string | Uint8Array, callback: NoParamCallback): void {\n        if (typeof file !== 'number') {\n            this.#checkProtected(file, false);\n        }\n        return nodeFS.appendFile.call(this, file, data, callback); // function appendFile(path, data, options, callback) {\n    }\n\n    appendFileSync(file: PathLike | number, data: string | Uint8Array): void {\n        if (typeof file !== 'number') {\n            this.#checkProtected(file, false);\n        }\n        return nodeFS.appendFileSync.call(this, file, data); // function appendFileSync(path, data, options) {\n    }\n\n    chmod(path: PathLike, mode: Mode, callback: NoParamCallback): void {\n        this.#checkProtected(path, false);\n        return nodeFS.chmod.call(this, path, mode, callback); // function chmod(path, mode, callback) {\n    }\n\n    chmodSync(path: PathLike, mode: Mode): void {\n        this.#checkProtected(path, false);\n        return nodeFS.chmodSync.call(this, path, mode); // function chmodSync(path, mode) {\n    }\n\n    chown(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void {\n        this.#checkProtected(path, false);\n        return nodeFS.chown.call(this, path, uid, gid, callback); // function chown(path, uid, gid, callback) {\n    }\n\n    chownSync(path: PathLike, uid: number, gid: number): void {\n        this.#checkProtected(path, false);\n        return nodeFS.chownSync.call(this, path, uid, gid); // function chownSync(path, uid, gid) {\n    }\n\n    copyFile(src: PathLike, dest: PathLike, mode: number | NoParamCallback, callback?: NoParamCallback): void {\n        this.#checkProtected(src, true);\n        this.#checkProtected(dest, false);\n        // @ts-expect-error should work\n        return nodeFS.copyFile.call(this, src, dest, mode, callback); // function copyFile(src, dest, mode, callback) {\n    }\n\n    copyFileSync(src: PathLike, dest: PathLike, mode?: number): void {\n        this.#checkProtected(src, true);\n        this.#checkProtected(dest, false);\n        return nodeFS.copyFileSync.call(this, src, dest, mode); // function copyFileSync(src, dest, mode) {\n    }\n\n    rename(oldPath: PathLike, newPath: PathLike, callback: NoParamCallback): void {\n        this.#checkProtected(oldPath, false);\n        this.#checkProtected(newPath, false);\n        return nodeFS.rename.call(this, oldPath, newPath, callback); // function rename(oldPath, newPath, callback) {\n    }\n\n    renameSync(oldPath: PathLike, newPath: PathLike): void {\n        this.#checkProtected(oldPath, false);\n        this.#checkProtected(newPath, false);\n        return nodeFS.renameSync.call(this, oldPath, newPath); // function renameSync(oldPath, newPath) {\n    }\n\n    open(path: PathLike, callback: (err: NodeJS.ErrnoException | null, fd: number) => void): void {\n        this.#checkProtected(path, true);\n        return nodeFS.open.call(this, path, callback); // function open(path, flags, mode, callback) {\n    }\n\n    openSync(path: PathLike, flags: OpenMode, mode?: Mode | null): number {\n        this.#checkProtected(path, true);\n        return nodeFS.openSync.call(this, path, flags, mode); // function openSync(path, flags, mode) {\n    }\n\n    truncate(path: PathLike, callback: NoParamCallback): void {\n        this.#checkProtected(path, false);\n        return nodeFS.truncate.call(this, path, callback); // function truncate(path, len, callback) {\n    }\n\n    truncateSync(path: PathLike): void {\n        this.#checkProtected(path, false);\n        return nodeFS.truncateSync.call(this, path); // function truncateSync(path, len) {\n    }\n\n    exists(path: PathLike, callback: (exists: boolean) => void): void {\n        this.#checkProtected(path, true);\n        return nodeFS.exists.call(this, path, callback); // function exists(path, callback) {\n    }\n\n    existsSync(path: PathLike): boolean {\n        this.#checkProtected(path, true);\n        return nodeFS.existsSync.call(this, path); // function existsSync(path) {\n    }\n\n    stat(\n        path: PathLike,\n        options: StatOptions | undefined | ((err: NodeJS.ErrnoException | null, stats: Stats) => void),\n        callback?: (err: NodeJS.ErrnoException | null, stats: Stats) => void,\n    ): void {\n        this.#checkProtected(path, true);\n        // @ts-expect-error should work\n        return nodeFS.stat.call(this, path, options, callback); // function stat(path, options = { bigint: false }, callback) {\n    }\n\n    statSync(path: PathLike, options?: StatOptions): Stats {\n        this.#checkProtected(path, true);\n        return nodeFS.statSync.call(this, path, options); // function statSync(path, options = { bigint: false, throwIfNoEntry: true }) {\n    }\n\n    utimes(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void {\n        this.#checkProtected(path, false);\n        return nodeFS.utimes.call(this, path, atime, mtime, callback); // function utimes(path, atime, mtime, callback) {\n    }\n\n    utimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void {\n        this.#checkProtected(path, false);\n        return nodeFS.utimesSync.call(this, path, atime, mtime); // function utimesSync(path, atime, mtime) {\n    }\n\n    readdir(\n        path: PathLike,\n        options:\n            | (ObjectEncodingOptions & {\n                  withFileTypes: true;\n                  recursive?: boolean | undefined;\n              })\n            | ((err: NodeJS.ErrnoException | null, files: Dirent[]) => void),\n        callback?: (err: NodeJS.ErrnoException | null, files: Dirent[]) => void,\n    ): void {\n        this.#checkProtected(path, true);\n        // @ts-expect-error should work\n        return nodeFS.readdir.call(this, path, options, callback); // function readdir(path, options, callback) {\n    }\n\n    readdirSync(\n        path: PathLike,\n        options?: ObjectEncodingOptions & {\n            withFileTypes: true;\n            recursive?: boolean | undefined;\n        },\n    ): void {\n        this.#checkProtected(path, true);\n        // @ts-expect-error should work\n        return nodeFS.readdirSync.call(this, path, options); // function readdirSync(path, options) {\n    }\n\n    createReadStream(path: PathLike, options?: BufferEncoding): ReadStream {\n        this.#checkProtected(path, true);\n        return nodeFS.createReadStream.call(this, path, options); // function createReadStream(path, options) {\n    }\n\n    createWriteStream(path: PathLike, options?: BufferEncoding): WriteStream {\n        this.#checkProtected(path, false);\n        return nodeFS.createWriteStream.call(this, path, options); // function createWriteStream(path, options) {\n    }\n\n    lchmod(path: PathLike, mode: Mode, callback: NoParamCallback): void {\n        this.#checkProtected(path, false);\n        return nodeFS.lchmod.call(this, path, mode, callback); // function lchmod(path, mode, callback) {\n    }\n\n    lchmodSync(path: PathLike, mode: Mode): void {\n        this.#checkProtected(path, false);\n        return nodeFS.lchmodSync.call(this, path, mode); // function lchmodSync(path, mode) {\n    }\n\n    lchown(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void {\n        this.#checkProtected(path, false);\n        return nodeFS.lchown.call(this, path, uid, gid, callback); // function lchown(path, uid, gid, callback) {\n    }\n\n    lchownSync(path: PathLike, uid: number, gid: number): void {\n        this.#checkProtected(path, false);\n        return nodeFS.lchownSync.call(this, path, uid, gid); // function lchownSync(path, uid, gid) {\n    }\n\n    link(existingPath: PathLike, newPath: PathLike, callback: NoParamCallback): void {\n        this.#checkProtected(existingPath, false);\n        this.#checkProtected(newPath, false);\n        return nodeFS.link.call(this, existingPath, newPath, callback); // function link(existingPath, newPath, callback) {\n    }\n\n    linkSync(existingPath: PathLike, newPath: PathLike): void {\n        this.#checkProtected(existingPath, false);\n        this.#checkProtected(newPath, false);\n        return nodeFS.linkSync.call(this, existingPath, newPath); // function linkSync(existingPath, newPath) {\n    }\n\n    lstat(\n        path: PathLike,\n        options: StatOptions | undefined | ((err: NodeJS.ErrnoException | null, stats: Stats) => void),\n        callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void,\n    ): void {\n        this.#checkProtected(path, true);\n        // @ts-expect-error should work\n        return nodeFS.lstat.call(this, path, options, callback); // function lstat(path, options = { bigint: false }, callback) {\n    }\n\n    lstatSync(path: PathLike, options?: StatOptions): Stats {\n        this.#checkProtected(path, true);\n        return nodeFS.lstatSync.call(this, path, options); // function lstatSync(path, options = { bigint: false, throwIfNoEntry: true }) {\n    }\n\n    lutimes(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void {\n        this.#checkProtected(path, false);\n        return nodeFS.lutimes.call(this, path, atime, mtime, callback); // function lutimes(path, atime, mtime, callback) {\n    }\n\n    lutimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void {\n        this.#checkProtected(path, false);\n        return nodeFS.lutimesSync.call(this, path, atime, mtime); // function lutimesSync(path, atime, mtime) {\n    }\n\n    mkdir(\n        path: PathLike,\n        options:\n            | Mode\n            | (MakeDirectoryOptions & {\n                  recursive: true;\n              })\n            | null\n            | undefined\n            | ((err: NodeJS.ErrnoException | null, path?: string) => void),\n        callback?: (err: NodeJS.ErrnoException | null, path?: string) => void,\n    ): void {\n        this.#checkProtected(path, false);\n        // @ts-expect-error should work\n        return nodeFS.mkdir.call(this, path, options, callback); // function mkdir(path, options, callback) {\n    }\n\n    mkdirSync(\n        path: PathLike,\n        options?: MakeDirectoryOptions & {\n            recursive: true;\n        },\n    ): string | undefined {\n        this.#checkProtected(path, false);\n        return nodeFS.mkdirSync.call(this, path, options); // function mkdirSync(path, options) {\n    }\n\n    mkdtemp(\n        prefix: string,\n        options: EncodingOption | ((err: NodeJS.ErrnoException | null, folder: string) => void),\n        callback?: (err: NodeJS.ErrnoException | null, folder: string) => void,\n    ): void {\n        this.#checkProtected(prefix, false);\n        // @ts-expect-error should work\n        return nodeFS.mkdtemp.call(this, prefix, options, callback); // function mkdtemp(prefix, options, callback) {\n    }\n\n    mkdtempSync(prefix: string, options?: EncodingOption): string | Buffer {\n        this.#checkProtected(prefix, false);\n        return nodeFS.mkdtempSync.call(this, prefix, options); // function mkdtempSync(prefix, options) {\n    }\n\n    rm(path: PathLike, options: RmOptions | NoParamCallback, callback?: NoParamCallback): void {\n        this.#checkProtected(path, false);\n        // @ts-expect-error should work\n        return nodeFS.rm.call(this, path, options, callback); // function rm(path, options, callback) {\n    }\n\n    rmSync(path: PathLike, options?: RmOptions): void {\n        this.#checkProtected(path, false);\n        return nodeFS.rmSync.call(this, path, options); // function rmSync(path, options) {\n    }\n\n    rmdir(path: PathLike, options: RmDirOptions | NoParamCallback, callback?: NoParamCallback): void {\n        this.#checkProtected(path, false);\n        // @ts-expect-error should work\n        return nodeFS.rmdir.call(this, path, options, callback); // function rmdir(path, options, callback) {\n    }\n\n    rmdirSync(path: PathLike, options?: RmDirOptions): void {\n        this.#checkProtected(path, false);\n        return nodeFS.rmdirSync.call(this, path, options); // function rmdirSync(path, options) {\n    }\n\n    watch(filename: PathLike, listener?: WatchListener<string>): FSWatcher {\n        this.#checkProtected(filename, true);\n        return nodeFS.watch.call(this, filename, listener); // function watch(filename, options, listener) {\n    }\n\n    watchFile(filename: PathLike, listener: StatsListener): StatWatcher {\n        this.#checkProtected(filename, true);\n        return nodeFS.watchFile.call(this, filename, listener); // function watchFile(filename, options, listener) {\n    }\n}\n"]}